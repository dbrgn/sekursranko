version: 2.1
jobs:

  test:
    docker:
      - image: rust:1.81
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-cargo-cache-{{ arch }}-{{ .Branch }}
            - v2-cargo-cache-{{ arch }}
      - run:
          name: Show versions
          command: rustc --version && cargo --version
      - run:
          name: Build
          command: cargo build
      - run:
          name: Run tests
          command: cargo test
      - save_cache:
          key: v2-cargo-cache-{{ arch }}-{{ .Branch }}
          paths:
            - target
            - /usr/local/cargo
      - save_cache:
          key: v2-cargo-cache-{{ arch }}
          paths:
            - target
            - /usr/local/cargo

  clippy:
    docker:
      - image: rust:1.81
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-cargo-clippy-cache
      - run: rustup component add clippy
      - run: cargo clippy --all-targets --all-features -- -D warnings
      - save_cache:
          key: v2-cargo-clippy-cache
          paths:
            - /usr/local/cargo

  fmt:
    docker:
      - image: rust:1.81
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-cargo-fmt-cache
      - run: rustup component add rustfmt
      - run: cargo fmt -- --check
      - save_cache:
          key: v2-cargo-fmt-cache
          paths:
            - /usr/local/cargo

  audit:
    docker:
      - image: docker.io/dbrgn/cargo-audit
    steps:
      - checkout
      - run:
          name: Run cargo-audit
          command: cargo audit

  docker-build:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build . --no-cache

  docker-publish-master:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          export IMAGE=dbrgn/sekursranko
          docker build . --no-cache -t ${IMAGE}:${CIRCLE_BRANCH} \
          && docker login -u $DOCKER_LOGIN -p $DOCKER_ACCESS_TOKEN \
          && docker push ${IMAGE}

  docker-publish-release:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          export VERSION=$(grep "^version =" Cargo.toml | sed 's/.*"\([^"]*\)".*/\1/')
          export IMAGE=dbrgn/sekursranko
          docker build . --no-cache -t ${IMAGE}:${VERSION} \
          && docker login -u $DOCKER_LOGIN -p $DOCKER_ACCESS_TOKEN \
          && docker push ${IMAGE}

workflows:
  # Build and test on push
  on_push:
    when:
      and:
        - equal: [ webhook, << pipeline.trigger_source >> ]
    jobs:
      - test
      - clippy
      - fmt
      - audit
      - docker-publish-master:
          context: Docker Hub dbrgn
          requires:
            - test
            - clippy
            - fmt
            - audit
          filters:
            branches:
              only:
                - master
      - docker-publish-release:
          context: Docker Hub dbrgn
          requires:
            - test
            - clippy
            - fmt
            - audit
          filters:
            branches:
              only:
                - release

  # Rebuild master images
  rebuild-master:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Weekly Run Master", << pipeline.schedule.name >> ]
    jobs:
      - docker-publish-master:
          context: Docker Hub dbrgn

  # Rebuild release images
  rebuild-release:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Weekly Run Release", << pipeline.schedule.name >> ]
    jobs:
      - docker-publish-release:
          context: Docker Hub dbrgn
